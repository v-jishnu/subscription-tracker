import type { ArcjetDecision, ArcjetOptions as CoreOptions, Primitive, Product, ExtraProps, CharacteristicProps } from "arcjet";
export * from "arcjet";
type Simplify<T> = {
    [KeyType in keyof T]: T[KeyType];
} & {};
declare const emptyObjectSymbol: unique symbol;
type WithoutCustomProps = {
    [emptyObjectSymbol]?: never;
};
type PlainObject = {
    [key: string]: unknown;
};
/**
 * Configuration for {@linkcode createRemoteClient}.
 */
export type RemoteClientOptions = {
    /**
     * Base URI for HTTP requests to Decide API (optional).
     *
     * Defaults to the environment variable `ARCJET_BASE_URL` (if that value
     * is known and allowed) and the standard production API otherwise.
     */
    baseUrl?: string;
    /**
     * Timeout in milliseconds for the Decide API (optional).
     *
     * Defaults to `500` in production and `1000` in development.
     */
    timeout?: number;
};
/**
 * Create a remote client.
 *
 * @param options
 *   Configuration (optional).
 * @returns
 *   Client.
 */
export declare function createRemoteClient(options?: RemoteClientOptions): import("@arcjet/protocol/client.js").Client;
type EventHandlerLike = (event: string, listener: (...args: any[]) => void) => void;
/**
 * Request for the Node.js integration of Arcjet.
 *
 * This is the minimum interface similar to `http.IncomingMessage`.
 */
export interface ArcjetNodeRequest {
    /**
     * Headers of the request.
     */
    headers?: Record<string, string | string[] | undefined>;
    /**
     * `net.Socket` object associated with the connection.
     *
     * See <https://nodejs.org/api/http.html#messagesocket>.
     */
    socket?: Partial<{
        remoteAddress: string;
        encrypted: boolean;
    }>;
    /**
     * HTTP method of the request.
     */
    method?: string;
    /**
     * HTTP version sent by the client.
     *
     * See <https://nodejs.org/api/http.html#messagehttpversion>.
     */
    httpVersion?: string;
    /**
     * URL.
     */
    url?: string;
    /**
     * Request body.
     */
    body?: unknown;
    /**
     * Add event handlers.
     *
     * This field is available through `stream.Readable` from `EventEmitter`.
     *
     * See <https://nodejs.org/api/events.html#emitteroneventname-listener>.
     */
    on?: EventHandlerLike;
    /**
     * Remove event handlers.
     *
     * This field is available through `stream.Readable` from `EventEmitter`.
     *
     * See <https://nodejs.org/api/events.html#emitterremovelistenereventname-listener>.
     */
    removeListener?: EventHandlerLike;
    /**
     * Whether the readable stream is readable.
     *
     * This field is available from `stream.Readable`.
     *
     * See <https://nodejs.org/api/stream.html#readablereadable>.
     */
    readable?: boolean;
}
/**
 * Configuration for the Node.js integration of Arcjet.
 *
 * @template Rules
 *   List of rules.
 * @template Characteristics
 *   Characteristics to track a user by.
 */
export type ArcjetOptions<Rules extends [...Array<Primitive | Product>], Characteristics extends readonly string[]> = Simplify<CoreOptions<Rules, Characteristics> & {
    /**
     * IP addresses and CIDR ranges of trusted load balancers and proxies
     * (optional, example: `["100.100.100.100", "100.100.100.0/24"]`).
     */
    proxies?: Array<string>;
}>;
/**
 * Instance of the Node.js integration of Arcjet.
 *
 * Primarily has a `protect()` method to make a decision about how a Node request
 * should be handled.
 *
 * @template Props
 *   Configuration.
 */
export interface ArcjetNode<Props extends PlainObject> {
    /**
     * Make a decision about how to handle a request.
     *
     * This will analyze the request locally where possible and otherwise call
     * the Arcjet decision API.
     *
     * @param request
     *   Details about the {@linkcode ArcjetNodeRequest} that Arcjet needs to make a
     *   decision.
     * @param props
     *   Additional properties required for running rules against a request.
     * @returns
     *   Promise that resolves to an {@linkcode ArcjetDecision} indicating
     *   Arcjetâ€™s decision about the request.
     */
    protect(request: ArcjetNodeRequest, ...props: Props extends WithoutCustomProps ? [] : [Props]): Promise<ArcjetDecision>;
    /**
     * Augment the client with another rule.
     *
     * Useful for varying rules based on criteria in your handler such as
     * different rate limit for logged in users.
     *
     * @template Rule
     *   Type of rule.
     * @param rule
     *   Rule to add to Arcjet.
     * @returns
     *   Arcjet instance augmented with the given rule.
     */
    withRule<Rule extends Primitive | Product>(rule: Rule): ArcjetNode<Simplify<Props & ExtraProps<Rule>>>;
}
/**
 * Create a new Node.js integration of Arcjet.
 *
 * > ðŸ‘‰ **Tip**:
 * > build your initial base client with as many rules as possible outside of a
 * > request handler;
 * > if you need more rules inside handlers later then you can call `withRule()`
 * > on that base client.
 *
 * @template Rules
 *   List of rules.
 * @template Characteristics
 *   Characteristics to track a user by.
 * @param options
 *   Configuration.
 * @returns
 *   Node.js integration of Arcjet.
 */
export default function arcjet<const Rules extends (Primitive | Product)[], const Characteristics extends readonly string[]>(options: ArcjetOptions<Rules, Characteristics>): ArcjetNode<Simplify<ExtraProps<Rules> & CharacteristicProps<Characteristics>>>;
