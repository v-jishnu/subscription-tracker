type Ipv4Tuple = [number, number, number, number];
type Ipv6Tuple = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number
];
declare class Ipv4Cidr {
    type: "v4";
    partSize: 8;
    parts: Readonly<Ipv4Tuple>;
    bits: number;
    constructor(parts: Ipv4Tuple, bits: number);
    contains(ip: Array<number>): boolean;
}
declare class Ipv6Cidr {
    type: "v6";
    partSize: 16;
    parts: Readonly<Ipv6Tuple>;
    bits: number;
    constructor(parts: Ipv6Tuple, bits: number);
    contains(ip: Array<number>): boolean;
}
/**
 * Parse CIDR addresses and keep non-CIDR IP addresses.
 *
 * @param value
 *   Value to parse.
 * @returns
 *   Parsed CIDR or given `value`.
 */
export declare function parseProxy(value: string): string | Cidr;
/**
 * Socket-like interface.
 */
interface PartialSocket {
    remoteAddress?: string | null | undefined;
}
/**
 * Interface that looks like info.
 */
interface PartialInfo {
    remoteAddress?: string | null | undefined;
}
interface PartialIdentiy {
    sourceIp?: string | null | undefined;
}
/**
 * Interface that looks like a request context.
 */
interface PartialRequestContext {
    identity?: PartialIdentiy | null | undefined;
}
/**
 * Interface with `headers`.
 */
export type HeaderLike = {
    /**
     * Headers.
     */
    headers: Headers | Record<string, string[] | string | undefined>;
};
/**
 * Interface that looks like a request,
 * of which `headers` is required and several other fields may exist.
 */
export type RequestLike = {
    /**
     * Some platforms pass `info`.
     */
    info?: PartialInfo | null | undefined;
    /**
     * Some platforms such as Cloudflare and Vercel provide `ip` directly on
     * `request`.
     */
    ip?: unknown;
    /**
     * Some platforms pass info in `requestContext`.
     */
    requestContext?: PartialRequestContext | null | undefined;
    /**
     * Some platforms pass a `socket`.
     */
    socket?: PartialSocket | null | undefined;
} & HeaderLike;
/**
 * Platform name.
 */
export type Platform = "cloudflare" | "fly-io" | "render" | "vercel";
/**
 * Configuration.
 */
export interface Options {
    /**
     * Platform the code is running on;
     * used to allow only known more trustworthy headers.
     */
    platform?: Platform | null | undefined;
    /**
     * Trusted proxies.
     */
    proxies?: ReadonlyArray<string | Cidr> | null | undefined;
}
export declare function findIp(request: RequestLike, options?: Options | null | undefined): string;
/**
 * One of the CIDR ranges.
 */
export type Cidr = Ipv4Cidr | Ipv6Cidr;
/**
 * Find an IP address.
 *
 * @deprecated
 *   Use the named export `findIp` instead.
 */
export default findIp;
